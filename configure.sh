#!/bin/bash
#    Minecraft: Pi Edition: Reborn Bash Launcher
#    Copyright (C) 2022 bsX
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

echo ""
echo "Minecraft: Pi Edition: Reborn Bash Launcher
Copyright (C) 2022 bsX

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>."
bld=$(tput bold)       # Bold
red=$(tput setaf 1)    # Red
grn=$(tput setaf 2)    # Green
ylw=$(tput setaf 3)    # Yellow
blu=$(tput setaf 4)    # Blue
pur=$(tput setaf 5)    # Purple
cyn=$(tput setaf 6)    # Cyan
wht=$(tput setaf 7)    # White
rst=$(tput sgr0)       # Text reset
echo ""
echo "===================="
echo "${bld}bMCPIL Configuration${rst}"
echo "===================="
echo ""
# Make sure the user doesn't accidentally overwrite their config
if [ "$cfg_new" != "1" ]
then
echo "Are you sure you want to re-configure BMCPIL?"
echo ""
read -p "Press [Enter] to continue, and Ctrl+C to exit. "
echo ""
fi

# Replace the current contents of the config file with a shebang, followed by the copyright notice
echo '#!/bin/bash
#    Minecraft: Pi Edition: Reborn Bash Launcher
#    Copyright (C) 2022 bsX
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.' > config.bcfg
# Print modification date
echo -n '# Generated by bMCPIL on ' >> config.bcfg
echo -n `date +%D` >> config.bcfg
echo -n " " >> config.bcfg
echo `date +%T` >> config.bcfg
# Print the comments preceding the actual configuration

echo '
# Config file for the bMCPIL launcher

# Game Preferences

# Render Distance
# - Options are: Far, Normal, Short, and Tiny' >> config.bcfg
# Write the real configurations
echo -n 'renderdistance="' >> config.bcfg
# Ask the user their render distance preference
echo ""
echo "Game Preferences:"
echo ""
read -p "Choose your Render Distance: Tiny, Short, Normal, or Far: " renderdistance
# Make sure it's valid, otherwise print an error and default to Normal
if [[ "$renderdistance" == "Tiny" || "$renderdistance" == "Short" || "$renderdistance" == "Normal" || "$renderdistance" == "Far" ]];
then
    echo -n $renderdistance >> config.bcfg
else
    echo -n "Normal" >> config.bcfg
    echo "${red}[Error] Unknown value. Defaulting to Normal.${rst}"
fi

echo '"' >> config.bcfg

# Print the comments preceding the actual configuration
echo '
# Username
# - Player name used on Multiplayer servers' >> config.bcfg
# Write the real configurations
echo -n 'username="' >> config.bcfg
# Ask the user for their playername
read -p "Choose your in-game name: " username
echo -n $username >> config.bcfg
echo '"' >> config.bcfg


# Print the comments preceding the actual configuration
echo '

# Launcher Preferences

# EnableUpdater
# - Whether the launcher should automatically update the game' >> config.bcfg
# Write the real configurations
echo -n 'enableupdater="' >> config.bcfg
# Print stuff
echo ""
echo "Launcher Preferences:"
echo ""
# Ask the user for their preference
read -p "Enable the MCPI Updater (Set to true unless you're using custom AppImages): (true/false) " enableupdater
# Make sure it's valid, otherwise print an error and default to true
if [[ "$enableupdater" == "true" || "$enableupdater" == "false" ]];
then
    echo -n $enableupdater >> config.bcfg
else
    echo -n "true" >> config.bcfg
    echo "${red}[Error] Unknown value. Defaulting to true.${rst}"
fi
echo '"' >> config.bcfg
echo ""

# Print the comments preceding the actual configuration
echo '
# UpdateServer
# - The server to download MCPI packages from' >> config.bcfg
# Write the real configurations
echo -n 'updateserver="' >> config.bcfg
# Ask the user for their preference
echo "Which version of MCPI do you want to use?"
echo "MCPI is the normal version of MCPI Reborn, and it's the recommended option"
echo "MCPI++ (mcpipp) is a fork created by PiNooz. It has extra compatibilty for WSL."
echo ""
read -p "Select one: (mcpi/mcpipp) " updateserver
# Make sure it's valid, otherwise print an error and default to true
if [[ "$updateserver" == "" || "$updateserver" == "mcpipp" || "$updateserver" == "mcpi" ]];
then
    echo -n $updateserver >> config.bcfg
else
    echo -n "true" >> config.bcfg
    echo "${red}[Error] Unknown value. Defaulting to mcpi.${rst}"
fi
echo '"' >> config.bcfg
echo ""

# Print the comments preceding the actual configuration
echo '
# EnableSkins
# - Whether the launcher should automatically download skins' >> config.bcfg
# Write the real configurations
echo -n 'enableskins="' >> config.bcfg
# Ask the user for their preference
read -p "Enable the skin downloader: (true/false) " enableskins
# Make sure it's valid, otherwise print an error and default to true
if [[ "$enableskins" == "true" || "$enableskins" == "false" ]];
then
    echo -n $enableskins >> config.bcfg
else
    echo -n "true" >> config.bcfg
    echo "${red}[Error] Unknown value. Defaulting to true.${rst}"
fi
echo '"' >> config.bcfg
echo ""

# Print the comments preceding the actual configuration
echo '
# Preset
# - Which flag preset should the game use?' >> config.bcfg
# Write the real configurations
echo -n 'presetsel="' >> config.bcfg
# Ask the user for their preference
presetopt=`ls ./presets/`
presetopt=`echo "$presetopt" | tr '\n' ' '`
read -p "Select a launch flag preset: ( ${presetopt}) " presetsel
echo -n $presetsel >> config.bcfg
echo '"' >> config.bcfg
echo ""

# Print the comments preceding the actual configuration
echo '
# AskToExit
# - Whether the launcher should ask to close the program if the game closes/crashes' >> config.bcfg
# Write the real configurations
echo -n 'asktoexit="' >> config.bcfg
# Ask the user for their preference
read -p "Should the launcher should ask to close the program if the game closes/crashes: (true/false) " asktoexit
# Make sure it's valid, otherwise print an error and default to true
if [[ "$asktoexit" == "true" || "$asktoexit" == "false" ]];
then
    echo -n $asktoexit >> config.bcfg
else
    echo -n "true" >> config.bcfg
    echo "${red}[Error] Unknown value. Defaulting to true.${rst}"
fi
echo '"' >> config.bcfg
echo ""

# Print the comments preceding the actual configuration
echo '
# CpuArch
# - CPU architecture for auto-update' >> config.bcfg
# Get the CPU architecture
arch=$(uname -i)
if [ "$arch" == 'x86_64' ];
then 
cpuarch="amd64"
elif [ "$arch" == i*86 ];
then
echo "CPU Architecture not supported [$arch]."
exit
elif [ "$arch" == armv* ];
then
cpuarch="armhf"
elif [ "$arch" == aarch64 ];
then
cpuarch="aarch64"
else
echo "CPU Architecture not detected [$arch]. Please enter it."
read -p "[arm64, armhf, amd64] " cpuarch
fi
echo -n 'cpuarch="' >> config.bcfg
echo -n $cpuarch >> config.bcfg
echo '"' >> config.bcfg


